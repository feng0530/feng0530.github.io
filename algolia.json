[{"categories":["實作練習"],"content":" 專案介紹 Link to heading 專案期間: 2023/07 ~ 2023/09\n擊破現代科技帶來的冷漠與疏離感， 我們致力於創建一個平台， 讓人們輕鬆建立社交連結和結交新朋友。 透過運動討論、活動和專業教練課程的結合， 在運動的同時，與他人共享快樂、學習新知識。 在這裡，你不再是孤單的一個人， 無聊就揪，揪了就動，EZ-DOM一起動!!\n專案連結\n專案概述 Link to heading 使用Maven建構的Spring Boot專案 Spring Boot: 2.7.x Java: 17 個人負責項目: 教練專區 預約教練 聯絡客服 技術應用 Link to heading 前端技術 Link to heading 利用BootStrap5網站模板進行頁面設計。 利用JavaScript進行網頁的資料驗證、實現動態效果。 利用Fetch API向後端發送請求，根據回應資料動態渲染頁面。 後端技術 Link to heading 遵循REST風格實現RESTful API。 使用Spring Data JPA實現資料的CRUD操作。 使用Fetch API向後端API發送請求。 使用WebSocket實現會員與後台管理員之間的即時客服功能。 使用Redis存取即時客服的對話紀錄，增加資料存取的效率。 功能展示 Link to heading ","date":"2025-03-23T00:00:00Z","description":"轉職培訓班畢業專題，此專案包含了預約教練、商城購物、揪團運動以及運動論壇的功能。","objectID":"1ca4deb8bdfbef087dd2197dd35e71b5","summary":" 專案介紹 Link to heading 專案期間: 2023/07 ~ 2023/09\n擊破現代科技帶來的冷漠與疏離感， 我們致力於創建一個平台， 讓人們輕鬆建立社交連結和結交新朋友。 透過運動討論、活動和專業教練課程的結合， 在運動的同時，與他人共享快樂、學習新知識。 在這裡，你不再是孤單的一個人， 無聊就揪，揪了就動，EZ-DOM一起動!!\n專案連結\n專案概述 Link to heading 使用Maven建構的Spring Boot專案 Spring Boot: 2.7.x Java: 17 個人負責項目: 教練專區 預約教練 聯絡客服 技術應用 Link to heading 前端技術 Link to heading 利用BootStrap5網站模板進行頁面設計。 利用JavaScript進行網頁的資料驗證、實現動態效果。 利用Fetch API向後端發送請求，根據回應資料動態渲染頁面。 後端技術 Link to heading 遵循REST風格實現RESTful API。 使用Spring Data JPA實現資料的CRUD操作。 使用Fetch API向後端API發送請求。 使用WebSocket實現會員與後台管理員之間的即時客服功能。 使用Redis存取即時客服的對話紀錄，增加資料存取的效率。 功能展示 Link to heading ","tags":["Java","Spring Boot","Java Script"],"title":"EZ-DOM 一起動","url":"/projects/ezdom/"},{"categories":["學習筆記"],"content":" 標題 : n*# + 空一格 Link to heading 標題分為六級，以 # 的數量來分級\n一級標題 Link to heading 二級標題 Link to heading 三級標題 Link to heading 四級標題 Link to heading 五級標題 Link to heading 六級標題 Link to heading 內文 Link to heading 粗體字 : **文字**\n斜體字 : *文字*\n有序序列 : 1. + 空一格 Link to heading Markdown 會自行計算是第幾項\n第一項 空四格(tab) + * + 空一格 空四格(tab) + * + 空一格 空四格(tab) + * + 空一格 第二項 第三項 第四項 第五項 無序序列 : * + 空一格 Link to heading 第一項 空四格(tab) + 1. + 空一格 空四格(tab) + 1. + 空一格 空四格(tab) + 1. + 空一格 第二項 第三項 第四項 第五項 第五項 引用 Link to heading 引用之文字\n\u0026gt; + 文字\n超連結 Link to heading Hugo 官方網站\n外部: [呈現的文字](外部連結)\n內部: [呈現的文字](/路徑)\n圖片 Link to heading 外部: [呈現的文字](外部連結)\n內部: [呈現的文字](/路徑)\n單行程式碼 Link to heading System.out.println(\u0026quot;Hello World\u0026quot;);\n/** * 寫法如下 * * `code` * */ 多行程式碼 Link to heading /** * 寫法如下 * * ```指定程式語言 * code... * code... * ``` */ public static void main(String[] args) { System.out.println(\u0026#34;Hello World\u0026#34;); } Shortcodes 範例 Link to heading 1.YouTube影片 Link to heading 2.Notice: Link to heading Note One note here. Tip I\u0026rsquo;m giving a tip about something. Example This is an example. Question Is this a question? Info Notice that this box contain information. Warning This is the last warning! Error There is an error in your code. 3.Tabgroup: Link to heading {{\u0026lt; tabgroup \u0026gt;}} {{\u0026lt; tab name=\u0026#34;Hello\u0026#34; \u0026gt;}} Hello World! {{\u0026lt; /tab \u0026gt;}} {{\u0026lt; tab name=\u0026#34;Goodbye\u0026#34; \u0026gt;}} Goodbye Everybody! {{\u0026lt; /tab \u0026gt;}} {{\u0026lt; /tabgroup \u0026gt;}} 效果如下: Hello Hello World! Goodbye Goodbye Everybody! 向右對齊 Link to heading {{\u0026lt; tabgroup align=\u0026#34;right\u0026#34; \u0026gt;}} {{\u0026lt; tab name=\u0026#34;Hello\u0026#34; \u0026gt;}} Hello World! {{\u0026lt; /tab \u0026gt;}} {{\u0026lt; tab name=\u0026#34;Goodbye\u0026#34; \u0026gt;}} Goodbye Everybody! {{\u0026lt; /tab \u0026gt;}} {{\u0026lt; /tabgroup \u0026gt;}} 效果如下: Hello Hello World! Goodbye Goodbye Everybody! 展示不同程式碼 Link to heading Tabgroup支援任何 Markdown語法\n{{\u0026lt; tabgroup style=\u0026#34;code\u0026#34; \u0026gt;}} {{\u0026lt; tab name=\u0026#34;Ruby\u0026#34; \u0026gt;}} ```ruby puts \u0026#39;Hello\u0026#39; ``` {{\u0026lt; /tab \u0026gt;}} {{\u0026lt; tab name=\u0026#34;Python\u0026#34; \u0026gt;}} ```python print(\u0026#39;Hello\u0026#39;) ``` {{\u0026lt; /tab \u0026gt;}} {{\u0026lt; tab name=\u0026#34;JavaScript\u0026#34; \u0026gt;}} ```js console.log(\u0026#34;Hello\u0026#34;); ``` {{\u0026lt; /tab \u0026gt;}} {{\u0026lt; /tabgroup \u0026gt;}} 效果如下: Ruby puts \u0026#39;Hello\u0026#39; Python print(\u0026#39;Hello\u0026#39;) JavaScript console.log(\u0026#34;Hello\u0026#34;); Mermaid.js Link to heading Mermaid.js 是一個可以在網頁中使用 Markdown 語法來繪製圖表的 JavaScript 庫。它的主要用途是讓開發人員和文件撰寫者，用 簡單的語法 快速生成 流程圖、時序圖、甘特圖 等視覺化圖表。\n如果你想在你的網站上使用Mermaid-JS， 可以在你的markdown file使用Shortcode\n流程圖 flowchart LR\rA --\u003e B\rB --\u003e C\rC --\u003e D\rD --\u003e B\r時序圖 sequenceDiagram\rparticipant Alice\rparticipant Bob\rAlice-\u003e\u003eBob: Hi Bob\rBob-\u003e\u003eAlice: Hi Alice\r","date":"2025-03-11T00:00:00Z","description":"Markdown 語法筆記","objectID":"bee7eca5172c0a7c5f818438f8b2a534","summary":" 標題 : n*# + 空一格 Link to heading 標題分為六級，以 # 的數量來分級\n一級標題 Link to heading 二級標題 Link to heading 三級標題 Link to heading 四級標題 Link to heading 五級標題 Link to heading 六級標題 Link to heading 內文 Link to heading 粗體字 : **文字**\n","tags":["Hugo","Markdown"],"title":"Markdown 語法筆記","url":"/posts/markdown-notes/"},{"categories":["實作練習"],"content":" 1.取得 Token的兩種方式 Link to heading 1-1 個人存取權杖 (Personal Access Token) Link to heading 首先登入 LINE Notify 並進入到個人頁面\n選擇發行權杖\n選擇一對一聊天室 or 群組\n沒有發行按鈕可以點選，使用以下語法來觸發按鈕\n// 抓取所有 \u0026lt;a\u0026gt; 標籤 const links = document.querySelectorAll(\u0026#39;a\u0026#39;); // 篩選出內容為 \u0026#34;發行\u0026#34; 的 \u0026lt;a\u0026gt; 標籤 const targetLinks = Array.from(links).filter(link =\u0026gt; link.textContent.trim() === \u0026#34;發行\u0026#34;); // 觸發每個符合條件的 \u0026lt;a\u0026gt; 標籤的 click 事件 targetLinks.forEach(link =\u0026gt; { link.click(); // 觸發 click 事件 }); 獲得權杖\n參考網站: https://shockuccu.blogspot.com/2021/10/postman.html 1-2 LINE Notify 應用 (Service) Link to heading 首先登入 LINE Notify，並建立好服務\n建立包含服務相關資訊的 OAuth URL，讓使用者進行訪問\nfunction oAuth2() { var URL = \u0026#39;https://notify-bot.line.me/oauth/authorize?\u0026#39;; URL += \u0026#39;response_type=code\u0026#39;; URL += \u0026#39;\u0026amp;client_id=[YOUR_CLIENT_ID]\u0026#39;; URL += \u0026#39;\u0026amp;redirect_uri=[YOUR_CALLBACK_URL]\u0026#39;; URL += \u0026#39;\u0026amp;scope=notify\u0026#39;; URL += \u0026#39;\u0026amp;state=NO_STATE\u0026#39;; window.location.href = URL; } 使用者訪問後進行登入，並進行授權\n授權成功後則會返回 Authorize Code\n再利用 Authorize Code 取得 Token\n請求方式 Link to heading HTTP 方法: POST API URL: https://notify-api.line.me/api/notify Headers Link to heading 參數名稱 必要性 說明 Content-Type 必須 application/x-www-form-urlencoded 請求參數 Link to heading 以下參數放在 Request Body 中（格式為 x-www-form-urlencoded）。\n參數名稱 必要性 說明 grant_type 必須 授權的類別。請指定authorization_code code 必須 對象的暫時識別碼，也就是剛剛取得的 Authorize Code redirect_uri 必須 服務的 Callback URL client_id 必須 服務的識別碼 client_secret 必須 服務的金鑰 參考網站 2.用 Token 送出請求 Link to heading 請求方式 Link to heading HTTP 方法: POST API URL: https://notify-api.line.me/api/notify Headers Link to heading 參數名稱 必要性 說明 Authorization 必須 Bearer + Access Token，即 (4) 所取得的 Token Content-Type 必須 application/x-www-form-urlencoded 請求參數 Link to heading 以下參數放在 Request Body 中（格式為 x-www-form-urlencoded）。\n參數名稱 必要性 類型 說明 message 必須 String 要傳送的訊息，最大 1000 字元。如果是空字串，則會報錯。 imageThumbnail 可選 String 圖片縮圖 URL（HTTPS），最大尺寸 240×240px，若指定了 imageFullsize 則必須包含此參數。 imageFullsize 可選 String 圖片完整 URL（HTTPS），最大尺寸 1024×1024px，檔案大小不可超過 1 MB。 imageFile 可選 File 上傳圖片檔案（PNG、JPEG），與 imageThumbnail 和 imageFullsize 互斥，只能使用一種。 stickerPackageId 可選 Integer 貼圖包 ID，需搭配 stickerId 使用。 stickerId 可選 Integer 貼圖 ID，需搭配 stickerPackageId 使用。 相關網站 Link to heading Line Messaging API Line貼圖文件 Line Notify ","date":"2024-12-06T00:00:00Z","description":"Spring Boot 串接 Line Notify的實作練習筆記","objectID":"877f13d710dad896d95b86f204bbfe41","summary":" 1.取得 Token的兩種方式 Link to heading 1-1 個人存取權杖 (Personal Access Token) Link to heading 首先登入 LINE Notify 並進入到個人頁面\n選擇發行權杖\n選擇一對一聊天室 or 群組\n沒有發行按鈕可以點選，使用以下語法來觸發按鈕\n// 抓取所有 \u0026lt;a\u0026gt; 標籤 const links = document.querySelectorAll(\u0026#39;a\u0026#39;); // 篩選出內容為 \u0026#34;發行\u0026#34; 的 \u0026lt;a\u0026gt; 標籤 const targetLinks = Array.from(links).filter(link =\u0026gt; link.textContent.trim() === \u0026#34;發行\u0026#34;); // 觸發每個符合條件的 \u0026lt;a\u0026gt; 標籤的 click 事件 targetLinks.forEach(link =\u0026gt; { link.click(); // 觸發 click 事件 }); 獲得權杖\n參考網站: https://shockuccu.blogspot.com/2021/10/postman.html 1-2 LINE Notify 應用 (Service) Link to heading 首先登入 LINE Notify，並建立好服務\n","tags":["Java","Spring Boot","Line Notify"],"title":"Spring Boot 串接 Line Notify","url":"/posts/line-notify/"},{"categories":["學習筆記"],"content":" 1. Docker Volume (資料持久化) Link to heading Docker Volume參考文件\n1.1 Volume簡介 Link to heading 持久化資料：即使容器刪除，資料仍然保留。 跨容器共享：多個容器可共用相同的 Volume。 效能最佳化：比直接寫入容器快。 資料的備份與遷移：使得資料管理更加靈活。 1.2 Volume常用指令 Link to heading docker volume create my_volume # 建立 Volume docker volume ls # 列出所有 Volume docker volume rm my_volume # 刪除 Volume docker run --mount type=volume,src=my_volume,dst={mount-path} # 掛載指定的 Volume到容器上 docker run --mount type=bind,src={host-path},dst={container-path} # 掛載主機目錄到容器上 Volume指令參考文件\n2. Docker Network Link to heading Docker Network官方參考文件\n2.1 Docker 網路模式 Link to heading Bridge：預設網路模式，容器間僅能通過 IP 進行通訊。 Host：容器與主機共享網路。 None：完全隔離網路。 2.3 自定義網路 Link to heading 連接到同一個自定義網路的容器，彼此之間可以通過容器名進行通訊 提供了更好的隔離性，避免無關聯的容器間進行通訊 2.3 Network常用指令 Link to heading docker network create my_network # 建立自訂 Network docker network ls # 列出所有 Network docker network connect my_network my_container # 將容器連接到 Network 3. Dockerfile (自動化建置映像檔) Link to heading Docker File官方參考文件\n3.1 Dockerfile簡介 Link to heading 定義映像檔內容： 可以定義其中要包含的所有元素，包括基礎映像、應用程序代碼、環境設置等。 自動化建構過程： 通過 Dockerfile，您可以自動化整個映像建構過程，無需手動執行每個步驟。 版本控制： 由於 Dockerfile 是一個文本文件，它可以被版本控制，使得文件的修改可以被追踪。 標準化： Dockerfile 提供了一種標準化的方式來定義和共享應用程序的運行環境。 沒有副檔名，且檔名為 Dockerfile 3.2 Dockerfile範例 Link to heading # 設定基礎映像檔 FROM ubuntu:latest # 設定基礎映像檔 RUN apt-get update # 複製檔案 COPY . /app # 設定工作目錄 WORKDIR /app # 指定預設容器啟動時執行的指令 CMD [\u0026#34;python\u0026#34;, \u0026#34;app.py\u0026#34;] 3.3 RUN vs CMD vs ENTRYPOINT Link to heading RUN\n在建構鏡像（docker build）時執行，結果會寫入映象檔的 Layer。 CMD\n設定容器啟動時執行的預設指令，可被 docker run 覆蓋。 如果列出多個，則只有最後一個有效。 ENTRYPOINT\n使用Exec型式撰寫。 如果列出多個，則只有最後一個有效。 須注意以下範例: # docker run : 會執行 \u0026#34;ping google.com\u0026#34; # 命令列參數會附加在最後 # docker run cat xxx.csv : 會報錯，因為執行的是 \u0026#34;ping google.com cat xxx.csv\u0026#34; ENTRYPOINT [\u0026#34;ping\u0026#34;, \u0026#34;google.com\u0026#34;] # ENTRYPOINT + CMD : CMD的值等於預設參數，需要都是 Exec型式 # docker run : 會執行 \u0026#34;ping google.com\u0026#34; # docker run test.com: 會替換掉CMD的值，即執行 \u0026#34;ping test.com\u0026#34; ENTRYPOINT [\u0026#34;ping\u0026#34;] CMD [\u0026#34;google.com\u0026#34;] 4. Docker Compose Link to heading 4.1 Docker Compose簡介 Link to heading 簡化配置與管理: 可以使用 docker-compose.yml 定義和管理多容器應用程式。 開發效率提升: 支持環境變量和配置文件，方便在不同環境間切換。 版本控制: 透過單一指令啟動完整環境。 4.2 Compose file範例 Link to heading Compose file官方參考文件\nversion: \u0026#39;3\u0026#39; services: web: image: nginx:latest ports: - \u0026#34;80:80\u0026#34; db: image: mysql:5.7 volumes: - db_data:/var/lib/mysql environment: MYSQL_ROOT_PASSWORD: example volumes: db_data: 4.3 Docker Compose常用指令 Link to heading docker-compose up # 啟動所有服務 docker-compose down # 停止並移除所有服務 docker-compose logs # 查看日誌 docker-compose ps # 檢查目前運行的容器 ","date":"2024-03-23T00:00:00Z","description":"Docker的進階內容，包含 Docker File、Docker Compose的介紹","objectID":"74f0cf52f71c0cd348411fb89fb7198b","summary":" 1. Docker Volume (資料持久化) Link to heading Docker Volume參考文件\n1.1 Volume簡介 Link to heading 持久化資料：即使容器刪除，資料仍然保留。 跨容器共享：多個容器可共用相同的 Volume。 效能最佳化：比直接寫入容器快。 資料的備份與遷移：使得資料管理更加靈活。 1.2 Volume常用指令 Link to heading docker volume create my_volume # 建立 Volume docker volume ls # 列出所有 Volume docker volume rm my_volume # 刪除 Volume docker run --mount type=volume,src=my_volume,dst={mount-path} # 掛載指定的 Volume到容器上 docker run --mount type=bind,src={host-path},dst={container-path} # 掛載主機目錄到容器上 Volume指令參考文件\n2. Docker Network Link to heading Docker Network官方參考文件\n","tags":["Docker"],"title":"Docker 進階內容筆記","url":"/posts/docker-advanced/"},{"categories":["學習筆記"],"content":" 1. Docker 簡介 Link to heading Docker 是一個開源的容器化平台，使開發者能夠將應用程式及其依賴項封裝到容器中，以實現跨平台運行與環境一致性。\n1.1 Docker 特點 Link to heading 特點 說明 輕量級 容器比 VM 更小、更快、更省資源 可移植性 一次開發，隨處運行 快速部署 幾秒鐘內啟動應用程式 一致性與隔離性 各個容器互不干擾 版本控制與回滾 更新、回滾都很簡單 容器編排 可用 Docker Swarm / Kubernetes 管理多個容器 1.2 虛擬主機 vs 容器 Link to heading Host OS：實體電腦的 OS Guest OS：基於 Host OS 啟動的 VM，其中的 OS 稱為 Guest OS Hypervisor：虛擬機器監視器，Host OS中負責管理 VM 的應用，或稱為Virtual Machine Monitor (VMM) 2. Docker 核心概念 Link to heading 2.1 映像檔（Image） Link to heading 唯讀模式，用來建立容器的模板。 包含應用程式、依賴、設定等。 可使用 Docker File建構而成。 可從 Docker Hub 或私有倉庫下載。 2.2 容器（Container） Link to heading 讀寫模式，基於映像檔執行的實例。 內部運行應用程式並維持獨立環境。 支援跨環境執行，確保一致性。 2.3 倉庫與註冊伺服器（Repository \u0026amp; Registry） Link to heading Repository：存放映像檔的地方。 Registry：管理多個 Repository，可分為公開（Docker Hub）與私有。 3. 常用指令 Link to heading 常見基本指令與核心元間的關係 3.1 映像檔管理 Link to heading docker pull image_name # 下載映像檔 docker images # 列出本機映像檔 docker rmi image_id # 刪除映像檔 映像檔指令參考文件\n3.2 容器管理 Link to heading docker run -d --name my_container -p 8080:80 nginx # 執行容器 docker ps # 列出運行中容器 docker ps -a # 列出所有容器 docker stop container_id # 停止容器 docker start container_id # 啟動容器 docker rm container_id # 刪除容器 容器指令參考文件\n3.3 備份相關指令 Link to heading 特性 docker save/load docker export/import docker commit 用途 備份或分享 Image 備份容器文件系統 保存容器為新的 Image 操作對象 Image Container Container 是否包含歷史層（Layers） ✅ 是 ❌ 否 ✅ 是 是否包含 Volume ❌ 否 ❌ 否 ❌ 否 結果類型 .tar 檔案（完整映像） .tar 檔案（文件系統快照） 新的 Image 是否適用於備份映像 ✅ 是 ❌ 否 ✅ 是 是否適用於備份容器狀態 ❌ 否 ✅ 是 ✅ 是 相關網站 Link to heading Docker 進階內容筆記 官方指令文件 官方公共倉庫 ","date":"2024-03-22T00:00:00Z","description":"Docker的基礎核心內容，Image、Container的介紹","objectID":"2a824b5a284233a7f488f005fdf39d62","summary":" 1. Docker 簡介 Link to heading Docker 是一個開源的容器化平台，使開發者能夠將應用程式及其依賴項封裝到容器中，以實現跨平台運行與環境一致性。\n1.1 Docker 特點 Link to heading 特點 說明 輕量級 容器比 VM 更小、更快、更省資源 可移植性 一次開發，隨處運行 快速部署 幾秒鐘內啟動應用程式 一致性與隔離性 各個容器互不干擾 版本控制與回滾 更新、回滾都很簡單 容器編排 可用 Docker Swarm / Kubernetes 管理多個容器 1.2 虛擬主機 vs 容器 Link to heading Host OS：實體電腦的 OS Guest OS：基於 Host OS 啟動的 VM，其中的 OS 稱為 Guest OS Hypervisor：虛擬機器監視器，Host OS中負責管理 VM 的應用，或稱為Virtual Machine Monitor (VMM) 2. Docker 核心概念 Link to heading 2.1 映像檔（Image） Link to heading 唯讀模式，用來建立容器的模板。 包含應用程式、依賴、設定等。 可使用 Docker File建構而成。 可從 Docker Hub 或私有倉庫下載。 2.2 容器（Container） Link to heading 讀寫模式，基於映像檔執行的實例。 內部運行應用程式並維持獨立環境。 支援跨環境執行，確保一致性。 2.3 倉庫與註冊伺服器（Repository \u0026amp; Registry） Link to heading Repository：存放映像檔的地方。 Registry：管理多個 Repository，可分為公開（Docker Hub）與私有。 3. 常用指令 Link to heading 常見基本指令與核心元間的關係 3.1 映像檔管理 Link to heading docker pull image_name # 下載映像檔 docker images # 列出本機映像檔 docker rmi image_id # 刪除映像檔 映像檔指令參考文件\n","tags":["Docker"],"title":"Docker 基礎內容筆記","url":"/posts/docker-beginner/"}]